class Menu:
    def __init__(self, name, items, start_time, end_time):
        self.name = name
        self.items = items
        self.start_time = start_time
        self.end_time = end_time

    # 7 task: provide str representation for .name, .start_time and .end_time
    def __repr__(self):
        # 8 task print str representation
        return f"{self.name} menu available from {self.start_time} to {self.end_time}"

    # 9 task: create function in order to sum all values from diccionary keys
    def calculate_bill(self, purchased_items):
        total = 0
        for item in purchased_items:
            total += self.items[item]
        return total


# 3 task create new instance with constructor info required
brunch = Menu("Brunch",
              {'pancakes': 7.50, 'waffles': 9.00, 'burger': 11.00, 'home fries': 4.50, 'coffee': 1.50, 'espresso': 3.00,
               'tea': 1.00, 'mimosa': 10.50, 'orange juice': 3.50}, 11, 16)

# 4 task create new instance with constructor info required
early_bird = Menu("early_bird", {'salumeria plate': 8.00, 'salad and breadsticks (serves 2, no refills)': 14.00,
                                 'pizza with quattro formaggi': 9.00, 'duck ragu': 17.50,
                                 'mushroom ravioli (vegan)': 13.50, 'coffee': 1.50, 'espresso': 3.00}, 13, 18)

# 5 task create new instance with constructor info required
dinner = Menu("Dinner",
              {'crostini with eggplant caponata': 13.00, 'caesar salad': 16.00, 'pizza with quattro formaggi': 11.00,
               'duck ragu': 19.50, 'mushroom ravioli (vegan)': 13.50, 'coffee': 2.00, 'espresso': 3.00}, 17, 23)

# 6 task create new instance with constructor info required
kids = Menu("Kids", {'chicken nuggets': 6.50, 'fusilli with wild mushrooms': 12.00, 'apple juice': 3.00}, 11, 21)

# 22 task create new instance menu
arepas_menu = Menu("Arepa's menu",
                   {'arepa pabellon': 7.00, 'pernil arepa': 8.50, 'guayanes arepa': 8.00, 'jamon arepa': 7.50}, 10, 20)

# 10 task calculate bill for brunch instance
print(brunch.calculate_bill(['pancakes', 'home fries', 'coffee']))

# 11 task: calculate bill for early-bird instance
print(early_bird.calculate_bill(["salumeria plate", "mushroom ravioli (vegan)"]))

list_menus = [brunch, early_bird, dinner, kids, arepas_menu]


# 12 task: create new class Franchise
class Franchise:
    # 13 task: define constructor with 2 arguments
    def __init__(self, address, menus):
        self.address = address
        self.menus = menus

    # 15 task give class Franchise a srt representation to print Franchise address
    def __repr__(self):
        return f"This is restaurant addrees: {self.address}"

    # 16 task create mehot in order to retrieve menus in an input time we provide
    def available_menus(self, time):
        list_menu_available = []
        for menu in self.menus:
            if menu.start_time <= time <= menu.end_time:
                list_menu_available.append(menu)
        return list_menu_available


# 14 task: create 2 instances with a list of menus object in order to have class Menu methods
flagship_store = Franchise("1232 West End Road", list_menus)
new_installment = Franchise("12 East Mulberry Street", list_menus)

# 23 task: create new franchise instance
arepas_place = Franchise("189 Fitzgerald Avenue", list_menus)

# 16 task: test method: available_menus
print(flagship_store.available_menus(12))
# 17 task: second test method: available_menus
print(flagship_store.available_menus(17))

list_franchises = [flagship_store, new_installment, arepas_place]


# 19 task: create new Class
class Business:

    # 20 task: define contructor with 2 parameters
    def __init__(self, name, franchises):
        self.name = name
        self.franchises = franchises


# 21 task define Business instance
basta_fazoolin = Business("Basta Fazoolin' with my Heart", list_franchises)

# 24 task: create new instance Business
take_arepa = Business("Take a' Arepa", list_franchises)

